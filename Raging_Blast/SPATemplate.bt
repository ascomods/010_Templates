/*****************************************************************************
 * SPATemplate.bt 
 * Dragon Ball Raging Blast 1 / 2 / Ultimate Tenkaichi - SPA file structure definitions
 *
 *****************************************************************************
 * Requirements: 
 *  common-types.bt template made by revel8n
 * 
 * Revision History:
 *  2023/01/31
 *  2021/12/09
 *  2021/11/10
 *  2021/07/30
 *
 * Credits:
 *  Ascomods (DC)
 *  HiroTex for his explanations
 *  revel8n for his templates
 *  adsl14
 */

#include "../common-types.bt"
#include "../common-functions.bt"

BigEndian();

local int currentColor;

void AlternateColors(int colorA, int colorB) {
    if (currentColor == colorA) {
        currentColor = colorB;
    } else {
        currentColor = colorA;
    }
    SetBackColor(currentColor);
}

struct SPA_FILE;

typedef union {
    int64 rot;
	local double x, y, z;
} rotation <read = rotationRead, write = rotationWrite>;

string rotationRead( const rotation &r )
{
    string s;
	r.x = (((double)((r.rot & 0x0fffffffffffffff) >> 40) / 0x7ffff) * 90) - 90,
    r.y = (((double)((r.rot & 0x000000ffffffffff) >> 20) / 0x7ffff) * 90) - 90;
    r.z = (((double)(r.rot & 0x00000000000fffff) / 0x7ffff) * 90) - 90;

    SPrintf( s, "(%e, %e, %e)", r.x, r.y, r.z );
	return s;
}

int64 getRotation(const double &v) {
    return (int64)(((v + 90) * 0x7ffff) / 90);
}

void rotationWrite( rotation &r, string s )
{
    SScanf( s, "(%lf, %lf, %lf)", r.x, r.y, r.z );
    local int64 rotX = getRotation(r.x) << 40;
    local int64 rotY = getRotation(r.y) << 20;
    local int64 rotZ = getRotation(r.z);

    r.rot = 0x3000000000000000 | (rotX | rotY | rotZ);
}

// float4 parsing functions
string float4SciRead( const float4 &v )
{
	string s;   
	SPrintf( s, "(%14e, %14e, %14e, %14e)", v.v[0], v.v[1], v.v[2], v.v[3] );
	return s;
}

typedef struct(int64 baseOffset)
{
	// 0x00
    ptrString name(baseOffset)    <read = ptrString_read>;
    uint32 unknown0x04;
    uint32 translationBlockCount;
	uint32 rotationBlockCount;
    // 0x10
    uint32 unknownBlockCount;
    uint32 translationFrameOffset    <format = hex>;
    uint32 rotationFrameOffset       <format = hex>;
    uint32 unknownFrameOffset        <format = hex>; // Not sure what info is, but is the same format as 'translations'
    // 0x20
    uint32 translationFloatOffset    <format = hex>;
    uint32 rotationFloatOffset       <format = hex>;
    uint32 unknownFloatOffset        <format = hex>;
    uint32 unknown0x2C               <format = hex>;

	if (translationBlockCount > 0)
	{   
	    PushFP();
	    {
            FSeek(baseOffset + translationFrameOffset);
    
            SetBackColor(cPurple);
            float translationFrameData[translationBlockCount] <format = hex>;

            FSeek(baseOffset + translationFloatOffset);

            SetBackColor(0xe21bbe);
            float4 translationFloatData[translationBlockCount] <read=float4SciRead>;
	    }
	    PopFP();
    }

	if (rotationBlockCount > 0)
	{   
	    PushFP();
	    {
            FSeek(baseOffset + rotationFrameOffset);

			SetBackColor(0xb7dc00);
            float rotFrameData[rotationBlockCount] <format = hex>;

            FSeek(baseOffset + rotationFloatOffset);

			SetBackColor(0x92a52d);
            rotation rotFloatData[rotationBlockCount];
	    }
	    PopFP();
    }

	if (unknownBlockCount > 0)
	{   
	    PushFP();
	    {
            FSeek(baseOffset + unknownFrameOffset);

			SetBackColor(0x5aafff);
            float unknownFrameData[unknownBlockCount] <format = hex>;

            FSeek(baseOffset + unknownFloatOffset);

			SetBackColor(0x0c8efc);
            float4 unknownFloatData[unknownBlockCount] <read=float4SciRead>;
	    }
	    PopFP();
    }

} BONE_ENTRY <read = readBone>;

string readBone(const BONE_ENTRY &b){
	string s;
	SPrintf(s, "%s", ptrString_read(b.name));
	return s;
}

typedef struct(int64 baseOffset, int useFloatData)
{
	// 0x00
    ptrString name(baseOffset)    <read = ptrString_read>;
    uint32 frameCount;
    uint32 frameOffset            <format = hex>;
    uint32 floatOffset          <format = hex>;

    if (frameCount > 0) {
	    PushFP();
	    {
            FSeek(baseOffset + frameOffset);

			SetBackColor(0x00b7ff);
            float frameData[frameCount] <format = hex>;
	    }
	    PopFP();
    }
	PushFP();
	{
        FSeek(baseOffset + floatOffset);
        SetBackColor(0x3643f4);
        if (useFloatData != 0) {
            float floatData[frameCount];
        } else {
            float unknownData;
        }
	}
	PopFP();
} SCNE_ENTRY <read = readSceneNode>;

string readSceneNode(const SCNE_ENTRY &sc){
	string s;
	SPrintf(s, "%s", ptrString_read(sc.name));
	return s;
}

struct SPA_HEADER
{
    // 0x00
	uint32 unknown0x00;
	ptrString name(startof(this))  <read = ptrString_read>;
	uint32 unknown0x08;
	float frameCount;
    // 0x10
    uint32 boneCount;
    uint32 maybeStartOffset      <format = hex>;
    uint32 sceneNodesCount;
    uint32 sceneNodesOffset      <format = hex>;
    // 0x20
    uint32 cameraCount;
    uint32 cameraOffset   <format = hex>;
    uint32 unknown0x28;
    uint32 unknown0x2C;
};

// SPA File Structure
struct SPA_FILE
{
	SetBackColor(0xb7dc00);
	struct SPA_HEADER header;
    
    currentColor = cLtBlue;
    if (header.sceneNodesCount > 0) {
	    struct
	    {
            local int i;
            local int64 currentOffset = startof(parentof(this));
            PushFP();
	        { 
                FSeek(currentOffset + header.sceneNodesOffset);
                for(i = 0; i < header.sceneNodesCount; i++) {
                    AlternateColors(0x00d8ff, 0x009dfa);
                    struct SCNE_ENTRY child(currentOffset, 0) <optimize = false>;
                }
            }
            PopFP();
	    } sceneNodesEntries;
    }
    if (header.cameraCount > 0) {
	    struct
	    {
            local int i;
            local int64 currentOffset = startof(parentof(this));
            PushFP();
	        { 
                FSeek(currentOffset + header.cameraOffset);
                for(i = 0; i < header.cameraCount; i++) {
                    AlternateColors(0x00d8ff, 0x009dfa);
                    struct SCNE_ENTRY child(currentOffset, 1) <optimize = false>;
                }
            }
            PopFP();
	    } cameraEntries;
    }

	struct
	{
        local int i;
        for(i = 0; i < header.boneCount; i++) {
            AlternateColors(0xbe7aff, 0x8b1eea);
            struct BONE_ENTRY child(startof(parentof(this))) <optimize = false>;
        }
	} boneEntries;
};

#ifndef NESTED_INCLUSION
struct SPA_FILE fileInfo;
#endif