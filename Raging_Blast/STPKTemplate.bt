/*****************************************************************************
 * stpk.bt - Structure definitions for Dragon Ball: Ragin Blast - stpz file related entities.
 *
 *****************************************************************************
 * Revision History:
 *  2011/06/14 - revel8n - Original
 */

#ifndef NESTED_INCLUSION
#define NESTED_INCLUSION
#endif

#include "../common-types.bt"
#include "../common-functions.bt"

#ifdef UT_MODE
#include "../Raging_Blast/SPRPTemplate.bt"
#include "../Raging_Blast/SPATemplate.bt"
#else
#include "SPRPTemplate.bt"
#include "SPATemplate.bt"
#endif

BigEndian();

// mark used bytes with a light green background
SetBackColor(cLtGreen);

struct STPK_FILE;

struct STPK_HEADER
{
	uint32 dataTag          <format = hex>; // "STPK"
	uint32 unknown0x04;
	uint32 entryCount;
	uint32 unknown0x0C;
};

void DumpEntry(char name[], int64 offset)
{
	FSeek(offset);
	
	local uint32 dataTag = ReadUInt(FTell());

	switch (dataTag)
	{
	case 0x5354504B:
		STPK_FILE data;
		break;
	case 0x53505250:
		SPRP_FILE data;
		break;
	case 0x53505233: // "SPR3"
		SPRP_FILE data;
		break;
	default:
        if ((Strstr(name, ".spa") != -1) && (Strstr(name, ".spae") == -1)){
            SPA_FILE data;
        }
        else
        {
		    uint32 data <format = hex>;
        }
		break;
	};
}

struct STPK_ENTRY(int64 baseOffset)
{
	// 0x00
	uint32 dataOffset    <format = hex>; // "STPZ"
	uint32 dataSize      <format = hex>;
	uint32 unknown0x08;
	uint32 unknown0x0C;
	// 0x10
	char   name[32];
	// 0x30
	
	PushFP();
	if (dataSize > 0)
	{
		FSeek(baseOffset + dataOffset);
		union (int64 baseOffset)
		{
			uint8  dataBytes[dataSize];
			DumpEntry(name, baseOffset + dataOffset);
		} data(baseOffset);
	}
	PopFP();
};

// STPK File Structure
struct STPK_FILE
{
	SetBackColor(cLtBlue);
	struct STPK_HEADER header;
	
	SetBackColor(cLtGreen);
	struct
	{
		struct STPK_ENTRY dataEntries(startof(parentof(this)))[header.entryCount] 
            <optimize = false, read = STPK_ENTRY_read>;
	} dataEntries;
};

string STPK_ENTRY_read (STPK_ENTRY& s)
{
	return s.name;
}

struct STPK_FILE fileInfo;
