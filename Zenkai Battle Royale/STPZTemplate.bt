/*****************************************************************************
 * stpz.bt - Structure definitions for Dragon Ball: Zenkai Battle Royale - stpz file related entities.
 *
 *****************************************************************************
 * Revision History:
 *  2009/12/03 - GWC - Original
 *  2023/02/27 - adsl14 - Added HCLS and 0HCS entries.
 */

#include "../common-types.bt"

//SetReadOnly(true);
LittleEndian();

// mark used bytes with a light green background
SetBackColor(cLtGreen);

struct STPZ_HEADER
{
	uint32 fileTag; // "STPZ"
	uint32 unknown0x04;
	uint32 unknown0x08;
	uint32 unknown0x0C;
};

struct _0DCS_HEADER
{
	SetBackColor(cLtGreen);
	uint32 fileTag; // "0DCS"
	uint32 uncompressedSize;
	uint32 compressedSize;
	uint32 unknown0x0C; // maximum uncompressed block size? - have not seen '0LCS' sections bigger than this size, but not sure if this is related
};

struct _0LCS_HEADER
{
	SetBackColor(cLtBlue);
	// 0x00
	uint32 fileTag; // "0LCS"
	uint32 uncompressedSize;
	uint32 compressedSize;
	uint32 unknown0x0C;
	SetBackColor(cLtYellow);
	// 0x10
	uint8  dataBytes[compressedSize - 0x10];
};

struct _HCLS_HEADER
{
	SetBackColor(cLtGreen);
	// 0x00
	uint32 fileTag; // "HLCS"
	uint32 uncompressedSize;
	uint32 compressedSize;
	uint32 unknown0x0C;  // maximum uncompressed block size? - have not seen '0HCS' sections bigger than this size, but not sure if this is related
    struct _0HCS_HEADER _0hcsHeader;
};

struct _0HCS_HEADER
{
	SetBackColor(cLtBlue);
	// 0x00
	uint32 fileTag; // "0HCS"
	uint32 uncompressedSize;
	uint32 compressedSize;
	uint32 unknown0x0C;
	SetBackColor(cLtYellow);
	// 0x10
	uint8  dataBytes[compressedSize - 0x10];
};

// STPZ File Structure
struct STPZ_FILE
{
	SetBackColor(cLtBlue);
	BigEndian();
	struct STPZ_HEADER stpzHeader;
	LittleEndian();
	
	struct _0DCS_HEADER _0dscHeader;
	
	local uint32 totalSize = sizeof(_0dscHeader);
	while (totalSize < _0dscHeader.compressedSize)
	{
        // Read entry
        dataType = ReadString(FTell(), 4);

        // Show each data
        switch(dataType)
        {
            case "0LCS":
                struct _0LCS_HEADER _0lcsHeader;
                totalSize += _0lcsHeader.compressedSize;
                break;
            case "HLCS":
                struct _HCLS_HEADER _hclsHeader;
                totalSize += _hclsHeader.compressedSize;
                break;
            default:
                struct _0LCS_HEADER _0lcsHeader;
                totalSize += _0lcsHeader.compressedSize;
                break;
        }
	}
};

local string dataType;

struct STPZ_FILE fileInfo;
